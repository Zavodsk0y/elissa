version: '3'

networks:
  backend-local:
    driver: bridge

volumes:
  db-local:
    driver: local

services:
  proxy:
    build:
      context: ../../../proxy
      dockerfile: .deploy/local.Dockerfile
      args:
        CONFIG_FILE: backend/backend.local.conf
    image: proxy-local
    container_name: proxy-local
    ports:
      - "${PROXY_PORT:-80}:80"
    networks:
      - backend-local
    volumes:
      - ../../laravel:/app
      - ../../../proxy/backend/backend.local.conf:/etc/nginx/templates/default.conf.template
    restart: unless-stopped
    environment:
      NGINX_SERVER: ${NGINX_SERVER:-localhost}
      FRONTEND_PORT: ${FRONTEND_PORT:-5173}
    depends_on:
      - backend-api
      - adminer

  backend:
    build:
      context: ../..
      dockerfile: .deploy/local/Dockerfile
      args:
        USER: ${LOCAL_USER:-www}
    image: backend-local
    container_name: backend-local
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=${DB_NAME:-elissa}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-123}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
    volumes:
      - ../../laravel:/app
    networks:
      - backend-local
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy

  backend-api:
    build:
      context: ../..
      dockerfile: .deploy/local/nginx/Dockerfile
    image: backend-api-local
    container_name: backend-api-local
    volumes:
      - ../../laravel:/app
    networks:
      - backend-local
    restart: unless-stopped
    depends_on:
      - backend

  db:
    image: postgres:15-alpine3.17
    container_name: db-local
    volumes:
      - db-local:/var/lib/postgresql/data
    networks:
      - backend-local
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-elissa}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-123}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-elissa}" ]
      interval: 5s
      timeout: 25s
      retries: 10

  adminer:
    image: adminer
    container_name: adminer-local
    restart: unless-stopped
    networks:
      - backend-local
    depends_on:
      - db